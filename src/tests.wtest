import nivelx.*
import wollok.game.*
import personajes.*
import enemigos.*
import direcciones.*
import objetosUtiles.*

describe "nivelM"{

	method initialize(){
		nivel1.iniciar()
	}
	
	test "harry NO puede lanzar hechizo"{
		assert.throwsException({harry.usarHechizo()})
	}
	
	test "harry puede reparar la llave"{
		harry.position(lr1.position())
		harry.guardarLlaveRota(lr1)
		harry.position(lr2.position())
		harry.guardarLlaveRota(lr2)
		harry.position(lr3.position())
		harry.guardarLlaveRota(lr3)
		harry.position(lr4.position())
		harry.guardarLlaveRota(lr4)
		harry.position(lr5.position())
		harry.guardarLlaveRota(lr5)
		harry.position(lr6.position())
		harry.guardarLlaveRota(lr6)
		harry.objetoActual(varita)
		harry.usarHechizo()
		
		assert.that(harry.objetoActual().esLlave())	
	}
	
	test "sirius puede tirar la varita"{
		
		sirius.objetoActual(varita)
		sirius.soltar()
		assert.equals(varita.position(), sirius.position())
	}
	
	test"sirius perro puede agarrar la varita"{
	 	sirius.transformarse()
	 	sirius.guardar(varita)
	 	assert.that(sirius.objetoActual().esVarita())
	}	
	test "guardia puede perseguir a harry"{
		harry.position(game.at(10,10))
		const guardia = new GuardiaPerseguidor(position = game.at(11,11), posicionDeCustodia = game.at(11,11))
		assert.that(guardia.puedePerseguir(harry))
	}
	
}


describe "nivel2" {
    
    method initialize(){
        nivel2.iniciar()
    }
    
    test "harry se choca con una pua, el y sirius pierden (se congelan)"{
        const puaaa = new Pua(position = (game.at(5,8)))
        h.generar(game.at(5,8))
        puaaa.activarMovimiento()
        assert.equals(harry.congelado() , harry.estado())
        assert.equals(sirius.congelado() , sirius.estado())
    }
    
    test "harry mueve la palanca y abre la puerta correspondiente" {
        h.generar(game.at(0,5))
        bs.generar(game.at(0,5))
        harry.usarObjeto()
        assert.equals(abierto, p2.estado())
    }
    
}
describe "hechizos Harry" {
	
	method initialize(){
	nivel3.iniciar()
	}
	test "Comprobar el cambio de estado del guardia no perseguidor luego de usar patronus"{
		guardiasNoPerseguidores.estaticos()
		assert.that(guardiasNoPerseguidores.guardias().all({guardia => guardia.estado() == guardiaEstatico}))
	}
	
	test "Comprobar el cambio de estado del guardia perseguidor luego de usar patronus"{
		guardiasPerseguidores.estaticos()
		assert.that(guardiasPerseguidores.guardias().all({guardia => guardia.estado() == guardiaEstatico}))
	}
}






describe "nivel4" { 
	
	method initialize(){
		nivel4.iniciar()
	}
	  
	test "harry entra a la zona guardias y no pueden moverse ni el ni sirius"{  

		harry.entrarEnZonaGuardias()
		assert.equals(harryCongelado, harry.estado())
		assert.notThat(harry.sePuedeMover(derecha))
		assert.notThat(sirius.sePuedeMover(izquierda))
		
	}
	
	test "sirius choca contra una pared y no puede moverse"{
		sirius.position(game.at(2,1))
		assert.notThat(sirius.sePuedeMover(arriba))
	}
	
	test "sirius pisa la zona invalida y vuelve al principio del camino"{
		const caminoInvalido = new CaminoInvalido(position = game.at(4, 13))
		caminoInvalido.colisionarCon(sirius)
		assert.equals(caminoInvalido.arribaDeLaEntrada(), sirius.position())
	}
}

